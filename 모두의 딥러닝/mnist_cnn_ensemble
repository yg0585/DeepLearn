{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"mnist_cnn_ensemble","provenance":[],"authorship_tag":"ABX9TyNebDMl0EiYHF7SGmg8yWFR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":18,"metadata":{"id":"rcIsAcTtNOvS","executionInfo":{"status":"ok","timestamp":1642865030809,"user_tz":-540,"elapsed":2,"user":{"displayName":"박영광","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14660446885232711204"}}},"outputs":[],"source":["from __future__ import absolute_import\n","from __future__ import division\n","from __future__ import print_function\n","\n","import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras.utils import to_categorical\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","source":["leraning_rate = 0.01\n","training_epochs = 12\n","batch_size = 128\n","\n","tf.random.set_seed(777)\n","\n","cur_dir = os.getcwd()\n","ckpt_dir_name = 'checkpoints'\n","model_dir_name = 'mnist_cnn_ensemble'\n","\n","checkpoint_dir = os.path.join(cur_dir, ckpt_dir_name, model_dir_name)\n","os.makedirs(checkpoint_dir, exist_ok=True)\n","\n","checkpoint_prefix = os.path.join(checkpoint_dir, model_dir_name)\n","\n","mnist = keras.datasets.mnist\n","class_names = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n","\n","(x_train, y_train), (x_test, y_test) = mnist.load_data()\n","\n","x_train = x_train / 255.0\n","x_test = x_test / 255.0\n","\n","x_train = np.expand_dims(x_train, axis = -1)\n","x_test= np.expand_dims(x_test, axis = -1)\n","\n","y_train = to_categorical(y_train, 10)\n","y_test = to_categorical(y_test, 10)\n","\n","train_dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train)).shuffle(buffer_size=100000).batch(batch_size)\n","test_dataset = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(batch_size)"],"metadata":{"id":"0wK0vJOIVctr","executionInfo":{"status":"ok","timestamp":1642871720363,"user_tz":-540,"elapsed":1368,"user":{"displayName":"박영광","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14660446885232711204"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["class MNISTModel(tf.keras.Model):\n","  def __init__(self):\n","    super(MNISTModel, self).__init__()\n","    self.conv1 = keras.layers.Conv2D(filters=16, kernel_size=(3,3), padding='SAME', activation ='relu')\n","    self.pool1 = keras.layers.MaxPool2D(pool_size=(2,2))\n","    self.drop1 = keras.layers.Dropout(0.5)\n","\n","    self.conv2 = keras.layers.Conv2D(filters=32, kernel_size=(3,3), padding='SAME', activation ='relu')\n","    self.pool2 = keras.layers.MaxPool2D(pool_size=(2,2))\n","    self.drop2 = keras.layers.Dropout(0.5)\n","\n","    self.conv3 = keras.layers.Conv2D(filters=64, kernel_size=(3,3), padding='SAME', activation ='relu')\n","    self.pool3 = keras.layers.MaxPool2D(pool_size=(2,2))\n","    self.drop3 = keras.layers.Dropout(0.5)\n","    self.pool3_flat = keras.layers.Flatten()\n","\n","    self.dense4 = keras.layers.Dense(units = 576, activation = 'relu')\n","    self.drop4 = keras.layers.Dropout(0.5)\n","\n","    self.dense5 = keras.layers.Dense(units = 10, activation='softmax')\n","  def call(self, inputs, training=False):\n","    net = self.conv1(inputs)\n","    net = self.pool1(net)\n","    net = self.drop1(net)\n","\n","    net = self.conv2(net)\n","    net = self.pool2(net)\n","    net = self.drop2(net)\n","\n","    net = self.conv3(net)\n","    net = self.pool3(net)\n","    net = self.drop3(net)\n","    net = self.pool3_flat(net)\n","\n","    net = self.dense4(net)\n","    net = self.drop4(net)\n","\n","    net = self.dense5(net)\n","\n","    return net"],"metadata":{"id":"muFpS1YIag1D","executionInfo":{"status":"ok","timestamp":1642866108243,"user_tz":-540,"elapsed":241,"user":{"displayName":"박영광","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14660446885232711204"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["models = []\n","num_models = 3\n","\n","for m in range(num_models):\n","  models.append(MNISTModel())"],"metadata":{"id":"cq3DvM14c2q-","executionInfo":{"status":"ok","timestamp":1642866153254,"user_tz":-540,"elapsed":373,"user":{"displayName":"박영광","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14660446885232711204"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["def loss_fn(model, images, labels):\n","  logits = model(images, training = True)\n","  loss = tf.reduce_mean(tf.keras.losses.categorical_crossentropy(y_pred = logits, y_true=labels, from_logits=True))\n","  return loss\n","\n","def grad(model, images, labels):\n","  with tf.GradientTape() as tape:\n","    loss = loss_fn(model, images, labels)\n","  return tape.gradient(loss, model.variables)\n","\n","def evaluate(models, images, labels):\n","  predictions = np.zeros_like(labels)\n","\n","  for model in models:\n","    logits = model(images, training = False)\n","    predictions += logits\n","  \n","  correct_prediction = tf.equal(tf.argmax(predictions, 1), tf.argmax(labels, 1))\n","  accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n","  return accuracy  "],"metadata":{"id":"ehROslpjdCJL","executionInfo":{"status":"ok","timestamp":1642866661776,"user_tz":-540,"elapsed":241,"user":{"displayName":"박영광","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14660446885232711204"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["optimizer = tf.keras.optimizers.Adam(learning_rate=learning_rate)\n","\n","checkpoints = []\n","for m in range(num_models):\n","  checkpoints.append(tf.train.Checkpoint(cnn = models[m]))"],"metadata":{"id":"we9Jz2Sbe-zo","executionInfo":{"status":"ok","timestamp":1642866715505,"user_tz":-540,"elapsed":236,"user":{"displayName":"박영광","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14660446885232711204"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["print('Learning started.')\n","for epoch in range(training_epochs):\n","  avg_loss =0.\n","  avg_train_acc = 0.\n","  avg_test_acc = 0.\n","  train_step = 0\n","  test_step = 0\n","\n","  for images, labels in train_dataset:\n","    for model in models:\n","      grads = grad(model, images, labels)\n","      optimizer.apply_gradients(zip(grads, model.variables))\n","      loss = loss_fn(model, images, labels)\n","      avg_loss += loss / num_models\n","    acc = evaluate(models, images, labels)\n","    avg_train_acc += acc\n","    train_step += 1\n","  avg_loss = avg_loss / train_step\n","  avg_train_acc = avg_train_acc / train_step\n","\n","  for images, labels in test_dataset:\n","    acc = evaluate(models, images, labels)\n","    avg_test_acc += acc\n","    test_step += 1\n","  avg_test_acc = avg_test_acc / test_step\n","  \n","  print('Epoch:', '{}'.format(epoch + 1), 'loss =', '{:.8f}'.format(avg_loss), \n","        'train accuracy = ', '{:.4f}'.format(avg_train_acc), \n","        'test accuracy = ', '{:.4f}'.format(avg_test_acc))\n","\n","\n","\n","print('Learning Finished')\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WYUXAao7ft4P","executionInfo":{"status":"ok","timestamp":1642875620389,"user_tz":-540,"elapsed":3894352,"user":{"displayName":"박영광","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14660446885232711204"}},"outputId":"2ceae723-165e-4fcd-f492-8626ea55e0e5"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["Learning started.\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/util/dispatch.py:1096: UserWarning: \"`categorical_crossentropy` received `from_logits=True`, but the `output` argument was produced by a sigmoid or softmax activation and thus does not represent logits. Was this intended?\"\n","  return dispatch_target(*args, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["Epoch: 1 loss = 0.57270575 train accuracy =  0.9573 test accuracy =  0.9486\n","Epoch: 2 loss = 0.56476301 train accuracy =  0.9567 test accuracy =  0.9552\n","Epoch: 3 loss = 0.56726599 train accuracy =  0.9561 test accuracy =  0.9615\n","Epoch: 4 loss = 0.57171035 train accuracy =  0.9575 test accuracy =  0.9603\n","Epoch: 5 loss = 0.57901245 train accuracy =  0.9579 test accuracy =  0.9574\n","Epoch: 6 loss = 0.57148367 train accuracy =  0.9587 test accuracy =  0.9601\n","Epoch: 7 loss = 0.57774407 train accuracy =  0.9576 test accuracy =  0.9602\n","Epoch: 8 loss = 0.56553298 train accuracy =  0.9592 test accuracy =  0.9641\n","Epoch: 9 loss = 0.57620054 train accuracy =  0.9587 test accuracy =  0.9622\n","Epoch: 10 loss = 0.57748830 train accuracy =  0.9584 test accuracy =  0.9525\n","Epoch: 11 loss = 0.58185339 train accuracy =  0.9584 test accuracy =  0.9637\n","Epoch: 12 loss = 0.57880032 train accuracy =  0.9570 test accuracy =  0.9632\n","Learning Finished\n"]}]}]}